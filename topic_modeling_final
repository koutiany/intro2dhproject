setwd("/Users/TianyiKou/Documents/R")
options(stringsAsFactors = FALSE)
library(quanteda)
library(topicmodels)
library(stringr)

textdata <- read.csv("new1.csv", sep =",", encoding = "UTF-8")
textdata$text[50]
himym_corpus <- corpus(textdata$text, docnames = textdata$doc_id)

#build a dictionary of lemmas
lemma_data <- read.csv("/Users/TianyiKou/Documents/R/baseform_en.tsv", encoding = "UTF-8")
#extended stopword list
stopwords_extended <- readLines("/Users/TianyiKou/Documents/R/stopwords_himym.txt", encoding = "UTF-8") %>% str_trim()
view(stopwords_extended)

# Create a DTM (may take a while)
corpus_tokens <- himym_corpus %>%
  tokens(remove_punct = TRUE, remove_numbers = TRUE, remove_symbols = TRUE) %>%
  tokens_tolower() %>%
  tokens_replace(lemma_data$inflected_form, lemma_data$lemma,
                 valuetype = "fixed") %>%
  tokens_remove(pattern = stopwords_extended, padding = T)
#corpus_tokens[[7]]

himym_collocations <- quanteda.textstats::textstat_collocations(corpus_tokens,
                                                               min_count = 5)
#himym_collocations <- himym_collocations[1:250, ] we didn't have to use this bc it doesn't apply

corpus_tokens <- tokens_compound(corpus_tokens, himym_collocations, join = TRUE)
#-----------------------------process text corpus as an input for topic modeling----------------------------------
#--------create the bag of words representations---------
DTM <- corpus_tokens %>%
  tokens_remove("") %>%
  dfm() %>%
  dfm_trim(min_docfreq = 3)

dim(DTM)
-----------------------------------------------------------------------
#"ted", "lily", "marshall", "barney", "robin","claudia","zoey","stella",
top20_terms <- c("ted", "lily", "marshall", "barney", "robin","claudia","zoey","stella","great","good", "ll", "bad", "damn","nice","guy","make","whoa")
DTM <- DTM[, !(colnames(DTM) %in% top20_terms)]

# due to vocabulary pruning, we have empty rows in our DTM
# LDA does not like this. So we remove those docs from the
# DTM and the metadata
sel_idx <- rowSums(DTM) > 0
DTM <- DTM[sel_idx, ]
textdata <- textdata[sel_idx, ]

require(topicmodels)
K <- 5
# compute the LDA model, inference via n iterations of Gibbs sampling
topicModel <- LDA(DTM, K, method="Gibbs", control=list(
  iter = 2000,
  seed = 1,
  verbose = 25,
  alpha = 0.02))

# have a look a some of the results (posterior distributions)
tmResult <- posterior(topicModel)
# format of the resulting object
attributes(tmResult)

nrow(DTM)
ncol(DTM)

# topics are probability distributions over the entire vocabulary
beta <- tmResult$terms # get beta from results
dim(beta) # K distributions over ncol(DTM) terms

rowSums(beta) # rows in beta sum to 1

nrow(DTM) # size of collection

# for every document we have a probability distribution of its contained topics
theta <- tmResult$topics
dim(theta) # nDocs(DTM) distributions over K topics

rowSums(theta)[1:10] # rows in theta sum to 1

terms(topicModel, 20)
top5termsPerTopic <- terms(topicModel, 8)
topicNames <- apply(top5termsPerTopic, 2, paste, collapse=" " )
#----------------------------------------------------
# Visualization
# LDAvis browser
library(LDAvis)
library("tsne")
svd_tsne <- function(x) tsne(svd(x)$u)
json <- createJSON(phi = beta, theta = theta, doc.length = rowSums(DTM),
                   vocab = colnames(DTM), term.frequency = colSums(DTM), mds.method = svd_tsne,
                   plot.opts = list(xlab = "", ylab = ""))
serVis(json)
#-----------------------get bar-----------------
# get mean topic proportions per season
topic_proportion_per_season <- aggregate(theta, by = list(season= textdata$season), mean)
#set topic names to aggregated columns
colnames(topic_proportion_per_season)[2:(K+1)] <- topicNames

#reshape data frame
library(reshape2)
vizDataFrame <- melt(topic_proportion_per_season, id.vars="season")
#plot topic proportions per decade as bar plot
require(pals)
ggplot(vizDataFrame,
       aes(x=season, y=value, fill=variable)) +
  geom_bar(stat = "identity") + ylab("proportion") +
  scale_fill_manual(values = paste0(alphabet(20), "FF"), name= "topics")+
  theme(axis.text.x = element_text(angle = 90, hjust = 1))

#---------------theta comparison at the end------------------------
#test1 <- aggregate(theta, by= list(textdata$speaker), mean) this line serves the same function as the next one. Next one is more of a pipeline
theta1 <- theta %>% as_tibble %>% mutate(speaker = textdata$speaker) %>% group_by(speaker) %>% summarise(across(where(is.numeric), ~ mean(.x, na.rm = TRUE)))

#Since we found the way of extracting them all into one data, we no longer need to write them separately
#robin_theta <- filter(theta1, speaker == "robin")
#ted_theta <- filter(theta1, speaker == "ted")
#barney_theta <- filter(theta1, speaker == "barney")
#lily_theta <- filter(theta1, speaker == "lily")
#marshall_theta <- filter(theta1, speaker == "marshall")

theta2 <- melt(theta1)
selectednames <- c("robin","lily","barney","ted","marshall")
theta3 <- filter(theta2, speaker %in% selectednames)

ggplot()+
  geom_point(data=theta3, mapping=aes(y=value,x=variable,color=speaker,shape=speaker))+
  labs(x="topic",y="theta")
